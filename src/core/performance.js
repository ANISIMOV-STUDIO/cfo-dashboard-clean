/**
 * Performance Optimization and Mobile Adaptation Module
 * Optimizes dashboard performance and provides responsive mobile support
 * Compatible with V8WebKit 8.3.27
 */
(function() {
    'use strict';
    
    var PerformanceOptimizer = {
        config: {
            lazyLoadThreshold: 200,
            debounceDelay: 300,
            maxCacheSize: 50,
            compressionEnabled: true,
            virtualScrollEnabled: false
        },
        
        cache: new Map(),
        observers: {},
        isMobile: false,
        isTablet: false,
        
        // Initialize performance optimization
        initialize: function() {\n            this.detectDeviceType();\n            this.setupLazyLoading();\n            this.optimizeChartRendering();\n            this.setupVirtualization();\n            this.optimizeDataLoading();\n            this.setupMobileAdaptations();\n            this.addPerformanceMonitoring();\n        },\n        \n        // Detect device type and capabilities\n        detectDeviceType: function() {\n            var userAgent = navigator.userAgent || '';\n            var screenWidth = window.innerWidth || document.documentElement.clientWidth;\n            \n            this.isMobile = screenWidth < 768;\n            this.isTablet = screenWidth >= 768 && screenWidth < 1024;\n            \n            // Update body classes\n            document.body.classList.toggle('mobile', this.isMobile);\n            document.body.classList.toggle('tablet', this.isTablet);\n            \n            // Detect touch capability\n            var hasTouch = 'ontouchstart' in window || navigator.maxTouchPoints > 0;\n            document.body.classList.toggle('touch', hasTouch);\n            \n            console.log('Device detected:', {\n                mobile: this.isMobile,\n                tablet: this.isTablet,\n                touch: hasTouch,\n                screenWidth: screenWidth\n            });\n        },\n        \n        // Setup lazy loading for charts and content\n        setupLazyLoading: function() {\n            if (!('IntersectionObserver' in window)) {\n                // Fallback for older browsers\n                this.setupScrollBasedLazyLoading();\n                return;\n            }\n            \n            var self = this;\n            \n            this.observers.lazyLoad = new IntersectionObserver(function(entries) {\n                entries.forEach(function(entry) {\n                    if (entry.isIntersecting) {\n                        var element = entry.target;\n                        self.loadLazyElement(element);\n                        self.observers.lazyLoad.unobserve(element);\n                    }\n                });\n            }, {\n                rootMargin: this.config.lazyLoadThreshold + 'px'\n            });\n            \n            // Observe all lazy elements\n            this.observeLazyElements();\n        },\n        \n        // Setup scroll-based lazy loading fallback\n        setupScrollBasedLazyLoading: function() {\n            var self = this;\n            var throttledCheck = this.throttle(function() {\n                self.checkLazyElements();\n            }, 100);\n            \n            window.addEventListener('scroll', throttledCheck);\n            window.addEventListener('resize', throttledCheck);\n            \n            // Initial check\n            setTimeout(function() {\n                self.checkLazyElements();\n            }, 100);\n        },\n        \n        // Observe elements for lazy loading\n        observeLazyElements: function() {\n            var lazyElements = document.querySelectorAll('[data-lazy]');\n            var self = this;\n            \n            lazyElements.forEach(function(element) {\n                self.observers.lazyLoad.observe(element);\n            });\n        },\n        \n        // Check lazy elements in viewport (fallback)\n        checkLazyElements: function() {\n            var lazyElements = document.querySelectorAll('[data-lazy]');\n            var self = this;\n            \n            lazyElements.forEach(function(element) {\n                if (self.isElementInViewport(element)) {\n                    self.loadLazyElement(element);\n                }\n            });\n        },\n        \n        // Load lazy element\n        loadLazyElement: function(element) {\n            var lazyType = element.getAttribute('data-lazy');\n            \n            switch (lazyType) {\n                case 'chart':\n                    this.loadLazyChart(element);\n                    break;\n                case 'data':\n                    this.loadLazyData(element);\n                    break;\n                default:\n                    element.removeAttribute('data-lazy');\n            }\n        },\n        \n        // Load lazy chart\n        loadLazyChart: function(canvas) {\n            if (canvas.tagName !== 'CANVAS') return;\n            \n            var chartId = canvas.id;\n            var page = canvas.closest('.page-content');\n            \n            if (page && window.PageRenderers) {\n                var pageId = page.id.replace('page-', '');\n                \n                // Render specific chart\n                setTimeout(function() {\n                    window.PageRenderers.renderChart(chartId, pageId);\n                }, 50);\n            }\n            \n            canvas.removeAttribute('data-lazy');\n        },\n        \n        // Check if element is in viewport\n        isElementInViewport: function(element) {\n            var rect = element.getBoundingClientRect();\n            var threshold = this.config.lazyLoadThreshold;\n            \n            return (\n                rect.bottom >= -threshold &&\n                rect.right >= -threshold &&\n                rect.top <= (window.innerHeight + threshold) &&\n                rect.left <= (window.innerWidth + threshold)\n            );\n        },\n        \n        // Optimize chart rendering\n        optimizeChartRendering: function() {\n            var self = this;\n            \n            // Override Chart.js defaults for performance\n            if (window.Chart) {\n                Chart.defaults.animation = false; // Disable animations on mobile\n                Chart.defaults.responsive = true;\n                Chart.defaults.maintainAspectRatio = false;\n                \n                // Reduce quality on mobile devices\n                if (this.isMobile) {\n                    Chart.defaults.elements.line.tension = 0; // No curves\n                    Chart.defaults.elements.point.radius = 0; // No points\n                }\n                \n                // Override update method for batching\n                var originalUpdate = Chart.prototype.update;\n                Chart.prototype.update = function(mode, duration) {\n                    // Batch updates using requestAnimationFrame\n                    if (!this._updateScheduled) {\n                        this._updateScheduled = true;\n                        var chart = this;\n                        \n                        requestAnimationFrame(function() {\n                            originalUpdate.call(chart, mode, duration);\n                            chart._updateScheduled = false;\n                        });\n                    }\n                };\n            }\n        },\n        \n        // Setup virtualization for large datasets\n        setupVirtualization: function() {\n            if (!this.config.virtualScrollEnabled) return;\n            \n            // Implement virtual scrolling for large lists\n            var self = this;\n            \n            document.addEventListener('scroll', this.throttle(function(event) {\n                if (event.target.classList.contains('virtual-list')) {\n                    self.updateVirtualList(event.target);\n                }\n            }, 50));\n        },\n        \n        // Update virtual list\n        updateVirtualList: function(listElement) {\n            // Virtual scrolling implementation would go here\n            // For now, just a placeholder\n        },\n        \n        // Optimize data loading\n        optimizeDataLoading: function() {\n            var self = this;\n            \n            // Cache data requests\n            if (window.DataManager) {\n                var originalLoadData = window.DataManager.loadData;\n                window.DataManager.loadData = function(jsonData) {\n                    var dataKey = self.generateDataKey(jsonData);\n                    \n                    // Check cache first\n                    if (self.cache.has(dataKey)) {\n                        return self.cache.get(dataKey);\n                    }\n                    \n                    // Load and cache result\n                    var result = originalLoadData.call(this, jsonData);\n                    self.addToCache(dataKey, result);\n                    \n                    return result;\n                };\n            }\n            \n            // Compress data if possible\n            if (this.config.compressionEnabled) {\n                this.setupDataCompression();\n            }\n        },\n        \n        // Setup data compression\n        setupDataCompression: function() {\n            // Simple data compression using JSON with reduced precision\n            var self = this;\n            \n            this.compressData = function(data) {\n                if (typeof data !== 'object') return data;\n                \n                var compressed = {};\n                for (var key in data) {\n                    if (data.hasOwnProperty(key)) {\n                        var value = data[key];\n                        if (Array.isArray(value)) {\n                            // Round numbers in arrays to reduce size\n                            compressed[key] = value.map(function(item) {\n                                return typeof item === 'number' ? \n                                    Math.round(item * 100) / 100 : item;\n                            });\n                        } else {\n                            compressed[key] = value;\n                        }\n                    }\n                }\n                return compressed;\n            };\n        },\n        \n        // Generate cache key for data\n        generateDataKey: function(data) {\n            if (typeof data === 'string') {\n                return 'str_' + data.substring(0, 100);\n            }\n            return 'obj_' + JSON.stringify(data).substring(0, 100);\n        },\n        \n        // Add item to cache with size limit\n        addToCache: function(key, value) {\n            if (this.cache.size >= this.config.maxCacheSize) {\n                // Remove oldest entry\n                var firstKey = this.cache.keys().next().value;\n                this.cache.delete(firstKey);\n            }\n            \n            this.cache.set(key, value);\n        },\n        \n        // Setup mobile adaptations\n        setupMobileAdaptations: function() {\n            if (!this.isMobile && !this.isTablet) return;\n            \n            this.adaptLayoutForMobile();\n            this.optimizeTouchInteractions();\n            this.adaptChartsForMobile();\n            this.setupMobileNavigation();\n        },\n        \n        // Adapt layout for mobile devices\n        adaptLayoutForMobile: function() {\n            var dashboard = document.querySelector('.dashboard');\n            if (!dashboard) return;\n            \n            // Adjust minimum width\n            dashboard.style.minWidth = 'auto';\n            dashboard.style.padding = '0 12px 24px';\n            \n            // Stack KPI cards vertically on mobile\n            if (this.isMobile) {\n                var kpiCards = document.querySelector('.kpi-cards');\n                if (kpiCards) {\n                    kpiCards.style.flexDirection = 'column';\n                    kpiCards.style.gap = '8px';\n                }\n            }\n            \n            // Adjust grid for mobile\n            var grids = document.querySelectorAll('.grid');\n            grids.forEach(function(grid) {\n                if (PerformanceOptimizer.isMobile) {\n                    grid.style.gridTemplateColumns = '1fr';\n                    grid.style.gap = '12px';\n                } else if (PerformanceOptimizer.isTablet) {\n                    grid.style.gridTemplateColumns = 'repeat(1, 1fr)';\n                }\n            });\n        },\n        \n        // Optimize touch interactions\n        optimizeTouchInteractions: function() {\n            // Increase touch target sizes\n            var buttons = document.querySelectorAll('button');\n            buttons.forEach(function(button) {\n                if (button.offsetHeight < 44) {\n                    button.style.minHeight = '44px';\n                    button.style.padding = '8px 12px';\n                }\n            });\n            \n            // Add touch-friendly hover effects\n            var style = document.createElement('style');\n            style.textContent = `\n                @media (hover: none) {\n                    .kpi-card:hover {\n                        transform: none;\n                    }\n                    button:hover {\n                        background: var(--panel) !important;\n                    }\n                }\n            `;\n            document.head.appendChild(style);\n        },\n        \n        // Adapt charts for mobile\n        adaptChartsForMobile: function() {\n            if (!window.Chart) return;\n            \n            // Mobile-specific chart options\n            var mobileChartOptions = {\n                responsive: true,\n                maintainAspectRatio: false,\n                plugins: {\n                    legend: {\n                        display: !this.isMobile, // Hide legend on mobile\n                        position: this.isTablet ? 'bottom' : 'top'\n                    },\n                    tooltip: {\n                        enabled: true,\n                        mode: 'nearest',\n                        intersect: false\n                    }\n                },\n                scales: {\n                    x: {\n                        ticks: {\n                            maxTicksLimit: this.isMobile ? 4 : 8,\n                            font: {\n                                size: this.isMobile ? 10 : 11\n                            }\n                        }\n                    },\n                    y: {\n                        ticks: {\n                            maxTicksLimit: 5,\n                            font: {\n                                size: this.isMobile ? 10 : 11\n                            }\n                        }\n                    }\n                }\n            };\n            \n            // Apply to chart defaults\n            Chart.defaults = Object.assign({}, Chart.defaults, mobileChartOptions);\n        },\n        \n        // Setup mobile navigation\n        setupMobileNavigation: function() {\n            if (!this.isMobile) return;\n            \n            // Add mobile navigation toggle\n            this.createMobileNavToggle();\n            \n            // Optimize tab navigation for mobile\n            this.optimizeMobileTabs();\n        },\n        \n        // Create mobile navigation toggle\n        createMobileNavToggle: function() {\n            var navToggle = document.createElement('button');\n            navToggle.className = 'mobile-nav-toggle';\n            navToggle.innerHTML = '☰';\n            navToggle.title = 'Меню';\n            \n            var header = document.querySelector('.dashboard-header .header-left');\n            if (header) {\n                header.appendChild(navToggle);\n            }\n            \n            // Toggle mobile menu\n            navToggle.addEventListener('click', function() {\n                document.body.classList.toggle('mobile-nav-open');\n            });\n        },\n        \n        // Optimize mobile tabs\n        optimizeMobileTabs: function() {\n            var tabContainer = document.querySelector('.segmented');\n            if (!tabContainer) return;\n            \n            // Make tabs horizontally scrollable on mobile\n            tabContainer.style.overflowX = 'auto';\n            tabContainer.style.whiteSpace = 'nowrap';\n            \n            var tabs = tabContainer.querySelectorAll('.segment-tab');\n            tabs.forEach(function(tab) {\n                tab.style.flexShrink = '0';\n                tab.style.minWidth = '80px';\n            });\n        },\n        \n        // Add performance monitoring\n        addPerformanceMonitoring: function() {\n            var self = this;\n            \n            // Monitor frame rate\n            this.frameCount = 0;\n            this.lastTime = performance.now();\n            \n            this.monitorFrameRate();\n            \n            // Monitor memory usage (if available)\n            if (performance.memory) {\n                setInterval(function() {\n                    self.checkMemoryUsage();\n                }, 10000); // Check every 10 seconds\n            }\n            \n            // Monitor load times\n            window.addEventListener('load', function() {\n                self.reportLoadTimes();\n            });\n        },\n        \n        // Monitor frame rate\n        monitorFrameRate: function() {\n            var self = this;\n            \n            function calculateFPS() {\n                var now = performance.now();\n                self.frameCount++;\n                \n                if (now >= self.lastTime + 1000) {\n                    var fps = Math.round((self.frameCount * 1000) / (now - self.lastTime));\n                    \n                    // Log low FPS\n                    if (fps < 30) {\n                        console.warn('Low FPS detected:', fps);\n                    }\n                    \n                    self.frameCount = 0;\n                    self.lastTime = now;\n                }\n                \n                requestAnimationFrame(calculateFPS);\n            }\n            \n            requestAnimationFrame(calculateFPS);\n        },\n        \n        // Check memory usage\n        checkMemoryUsage: function() {\n            if (!performance.memory) return;\n            \n            var memory = performance.memory;\n            var usedMB = Math.round(memory.usedJSHeapSize / 1048576);\n            var totalMB = Math.round(memory.totalJSHeapSize / 1048576);\n            var limitMB = Math.round(memory.jsHeapSizeLimit / 1048576);\n            \n            // Warn if memory usage is high\n            if (usedMB / limitMB > 0.8) {\n                console.warn('High memory usage:', {\n                    used: usedMB + 'MB',\n                    total: totalMB + 'MB',\n                    limit: limitMB + 'MB'\n                });\n                \n                // Clear cache to free memory\n                this.cache.clear();\n            }\n        },\n        \n        // Report load times\n        reportLoadTimes: function() {\n            if (!performance.timing) return;\n            \n            var timing = performance.timing;\n            var loadTime = timing.loadEventEnd - timing.navigationStart;\n            var domReady = timing.domContentLoadedEventEnd - timing.navigationStart;\n            \n            console.log('Performance metrics:', {\n                'Total load time': loadTime + 'ms',\n                'DOM ready': domReady + 'ms',\n                'First paint': performance.getEntriesByType ? \n                    performance.getEntriesByType('paint')[0]?.startTime + 'ms' : 'N/A'\n            });\n        },\n        \n        // Throttle function calls\n        throttle: function(func, limit) {\n            var inThrottle;\n            return function() {\n                var args = arguments;\n                var context = this;\n                if (!inThrottle) {\n                    func.apply(context, args);\n                    inThrottle = true;\n                    setTimeout(function() {\n                        inThrottle = false;\n                    }, limit);\n                }\n            };\n        },\n        \n        // Debounce function calls\n        debounce: function(func, delay) {\n            var timeout;\n            return function() {\n                var context = this;\n                var args = arguments;\n                clearTimeout(timeout);\n                timeout = setTimeout(function() {\n                    func.apply(context, args);\n                }, delay || this.config.debounceDelay);\n            };\n        },\n        \n        // Optimize image loading\n        optimizeImages: function() {\n            var images = document.querySelectorAll('img');\n            \n            images.forEach(function(img) {\n                // Add lazy loading attribute\n                img.loading = 'lazy';\n                \n                // Add mobile-optimized sources\n                if (PerformanceOptimizer.isMobile && img.dataset.mobileSrc) {\n                    img.src = img.dataset.mobileSrc;\n                }\n            });\n        },\n        \n        // Clear all caches\n        clearCaches: function() {\n            this.cache.clear();\n            \n            // Clear browser caches if possible\n            if ('caches' in window) {\n                caches.keys().then(function(names) {\n                    names.forEach(function(name) {\n                        caches.delete(name);\n                    });\n                });\n            }\n        },\n        \n        // Get performance metrics\n        getMetrics: function() {\n            return {\n                cacheSize: this.cache.size,\n                isMobile: this.isMobile,\n                isTablet: this.isTablet,\n                memoryUsage: performance.memory ? {\n                    used: Math.round(performance.memory.usedJSHeapSize / 1048576),\n                    total: Math.round(performance.memory.totalJSHeapSize / 1048576)\n                } : null,\n                loadTime: performance.timing ? \n                    performance.timing.loadEventEnd - performance.timing.navigationStart : null\n            };\n        }\n    };\n    \n    // Add mobile-specific CSS\n    var mobileStyles = document.createElement('style');\n    mobileStyles.textContent = `\n        /* Mobile Adaptations */\n        @media (max-width: 767px) {\n            .dashboard {\n                min-width: auto !important;\n                padding: 0 12px 24px !important;\n            }\n            \n            .kpi-cards {\n                flex-direction: column !important;\n                gap: 8px !important;\n            }\n            \n            .kpi-card {\n                min-width: auto !important;\n            }\n            \n            .controls {\n                grid-template-columns: repeat(2, 1fr) !important;\n                gap: 8px !important;\n            }\n            \n            .grid {\n                grid-template-columns: 1fr !important;\n                gap: 12px !important;\n            }\n            \n            .card {\n                min-height: 200px !important;\n            }\n            \n            .page-navigation {\n                overflow-x: auto;\n            }\n            \n            .segmented {\n                overflow-x: auto;\n                white-space: nowrap;\n            }\n            \n            .segment-tab {\n                flex-shrink: 0;\n                min-width: 80px;\n            }\n            \n            .mobile-nav-toggle {\n                display: block;\n                margin-left: 12px;\n                border: none;\n                background: none;\n                font-size: 18px;\n                cursor: pointer;\n            }\n        }\n        \n        /* Tablet Adaptations */\n        @media (min-width: 768px) and (max-width: 1023px) {\n            .dashboard {\n                max-width: 100% !important;\n                margin: 12px !important;\n            }\n            \n            .controls {\n                grid-template-columns: repeat(3, 1fr) !important;\n            }\n            \n            .grid {\n                grid-template-columns: 1fr !important;\n            }\n        }\n        \n        /* Desktop optimizations */\n        @media (min-width: 1024px) {\n            .mobile-nav-toggle {\n                display: none;\n            }\n        }\n        \n        /* Touch device optimizations */\n        .touch button {\n            min-height: 44px;\n        }\n        \n        .touch .kpi-card:hover {\n            transform: none;\n        }\n        \n        /* High DPI screens */\n        @media (-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi) {\n            .chart-body canvas {\n                image-rendering: crisp-edges;\n            }\n        }\n        \n        /* Loading states */\n        .loading {\n            pointer-events: none;\n            opacity: 0.6;\n        }\n        \n        .loading::after {\n            content: '';\n            position: absolute;\n            top: 50%;\n            left: 50%;\n            width: 20px;\n            height: 20px;\n            margin: -10px;\n            border: 2px solid #ccc;\n            border-top-color: #007AFF;\n            border-radius: 50%;\n            animation: spin 1s linear infinite;\n        }\n        \n        @keyframes spin {\n            to { transform: rotate(360deg); }\n        }\n    `;\n    document.head.appendChild(mobileStyles);\n    \n    // Export to window\n    window.PerformanceOptimizer = PerformanceOptimizer;\n    \n    // Auto-initialize when DOM is ready\n    document.addEventListener('DOMContentLoaded', function() {\n        PerformanceOptimizer.initialize();\n    });\n    \n    // Handle orientation changes\n    window.addEventListener('orientationchange', function() {\n        setTimeout(function() {\n            PerformanceOptimizer.detectDeviceType();\n            PerformanceOptimizer.adaptLayoutForMobile();\n        }, 100);\n    });\n    \n    // Handle window resize\n    window.addEventListener('resize', PerformanceOptimizer.debounce(function() {\n        PerformanceOptimizer.detectDeviceType();\n        PerformanceOptimizer.adaptLayoutForMobile();\n    }, 250));\n    \n})();